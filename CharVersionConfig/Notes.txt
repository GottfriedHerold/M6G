Setup / Maintenance considerations for CVConfig and managers (with class Manager)

- general: We re-create the whole config after every config change, so hooks are easier.

Normal way:
Manager.__init__ should do minimal setup and make minimal assumptions on validity of passed arguments.
Manager.__init__ is passed (among other things) both the calling cv_config and a reference to the very set of instructions used to create this manager.
 
Manager.post_setup is then called. With create == NO_CREATE, may assume validity of cv_config, which can be used to
check for the presence of other managers (whose post_setup() may not yet have run).
cv_config's post_process_setup queue can be used to delay running code after all post_setup()'s have run.


(Initial) creation of configs:
Will call Manager.__init__ with cv_config, then Manager.post_setup(with create == create_config)
cv_config's data is assumed completely correct; in particular, the instructions to create manager are included in its
config and data_source_order is setup correctly, including any uuids.
post_setup(create_config) must make sure that database-related setup is run once, if needed.
It may in principle modify/update the cv_configs's python_recipe.
after post_setup(create_config), the manager is not used anymore: We re-create the whole config the normal way.


(Derived) creation of configs from other configs:
We construct and setup the source config and its managers.
Then we copy the full config (except possibly changing edit_mode) and run __init__ and post_setup on the target.
post_setup is called with (create == copy_config) and additional parameters to indicate transplant mode and a reference to the source config.
post_setup will need to make adjustment to its own config.

We then create the target the normal way using these instruction. The source should NOT be changed.


Adding Managers:
We are given a cv_config whose managers are setup normally.
CVConfig.add_manager(instruction) adds the new instructions and then calls Manager.__init__, followed by Manager.post_setup(add_manager)
Manager.post_setup(create=add_manager) needs to ensure that data_source_descriptions can be read.
In particular, it probably has to update its own uuid_refs to register keys.

Note that the cv_config is technically not in a valid state during post_setup(create=add_manager), as the manager and
its instructions are already added, but the ordering has not yet been done.
After that, we fix the ordering (by the caller!) and call post_process_setup.
Then we recreate the config from scratch

Deleting Managers:
We are given a cv_config whose managers are setup normally.
We call manager.delete_manager() to inform the manager it is about to be deleted.
Then we remove the instructions and fix the orderings.

Deleting configs:
We re-setup the whole config with calling post_setup(create=delete_config) on all managers rather than post_setup(create=NO_CREATE)
We do *NOT* call manager.delete_manager(), as this is usually not needed: the database will take care of cascade-deleting things.

Change Manager's parameters:
We are given an (old) cv_config whose managers are setup normally.
We call manager.change_instruction(new_instruction, target_py_recipe).
In this case, it is fully the managers job do everything, including overwriting the instructions.
(This is because the new_instructions likely have to be adjusted for uuids anyways) 